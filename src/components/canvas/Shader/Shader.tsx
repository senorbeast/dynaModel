/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef, useMemo } from 'react'
import { useGLTF, Merged } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    USBPort: THREE.Mesh
    Module_default: THREE.Mesh
    Module_camera_1: THREE.Mesh
    Module_camera_2: THREE.Mesh
    Module_motionsensor: THREE.Mesh
    Module_computervision: THREE.Mesh
  }
  materials: {
    PortM: THREE.MeshStandardMaterial
    ModuleM: THREE.MeshStandardMaterial
    Plastic1M: THREE.MeshStandardMaterial
    GlassM: THREE.MeshStandardMaterial
    FabricM: THREE.MeshStandardMaterial
    TilesM: THREE.MeshStandardMaterial
  }
}

export default function InstancedModel(props) {
  const { nodes } = useGLTF('/multi-models.glb') as GLTFResult
  const instances = useMemo(
    () => ({
      USBPort: nodes.USBPort,
      Moduledefault: nodes.Module_default,
      Modulecamera: nodes.Module_camera_1,
      Modulecamera1: nodes.Module_camera_2,
      Modulemotionsensor: nodes.Module_motionsensor,
      Modulecomputervision: nodes.Module_computervision,
    }),
    [nodes]
  )
  return (
    <Merged meshes={instances} {...props}>
      {(instances) => <Model instances={instances} />}
    </Merged>
  )
}

function Model({ instances, ...props }: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>()
  // const { nodes, materials } = useGLTF('/multi-models.glb') as GLTFResult
  // console.log(materials)
  return (
    <group ref={group} {...props} dispose={null}>
      <instances.USBPort />
      <instances.Moduledefault />
      <group position={[50, 0, 0]}>
        <instances.Modulecamera />
        <instances.Modulecamera1 />
      </group>
      <instances.Modulemotionsensor position={[-35, 0, 0]} />
      <instances.Modulecomputervision position={[0, 0, -50]} />
    </group>
  )
}

useGLTF.preload('/multi-models.glb')

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

// import * as THREE from 'three'
// import React, { useRef } from 'react'
// import { useGLTF } from '@react-three/drei'
// import { GLTF } from 'three-stdlib'

// type GLTFResult = GLTF & {
//   nodes: {
//     USBPort: THREE.Mesh
//     Module_default: THREE.Mesh
//     Module_camera_1: THREE.Mesh
//     Module_camera_2: THREE.Mesh
//     Module_motionsensor: THREE.Mesh
//     Module_computervision: THREE.Mesh
//   }
//   materials: {
//     PortM: THREE.MeshStandardMaterial
//     ModuleM: THREE.MeshStandardMaterial
//     Plastic1M: THREE.MeshStandardMaterial
//     GlassM: THREE.MeshStandardMaterial
//     FabricM: THREE.MeshStandardMaterial
//     TilesM: THREE.MeshStandardMaterial
//   }
// }

// export default function Model({ ...props }: JSX.IntrinsicElements['group']) {
//   const group = useRef<THREE.Group>()
//   const { nodes, materials } = useGLTF('/multi-models.glb') as GLTFResult
//   return (
//     <group ref={group} {...props} dispose={null}>
//       <mesh geometry={nodes.USBPort.geometry} material={materials.PortM} />
//       <mesh
//         geometry={nodes.Module_default.geometry}
//         material={materials.ModuleM}
//       />
//       <group position={[50, 0, 0]}>
//         <mesh
//           geometry={nodes.Module_camera_1.geometry}
//           material={materials.Plastic1M}
//         />
//         <mesh
//           geometry={nodes.Module_camera_2.geometry}
//           material={materials.GlassM}
//         />
//       </group>
//       <mesh
//         geometry={nodes.Module_motionsensor.geometry}
//         material={materials.FabricM}
//         position={[-35, 0, 0]}
//       />
//       <mesh
//         geometry={nodes.Module_computervision.geometry}
//         material={materials.TilesM}
//         position={[0, 0, -50]}
//       />
//     </group>
//   )
// }

// useGLTF.preload('/multi-models.glb')
